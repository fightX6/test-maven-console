<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
                    http://www.springframework.org/schema/beans
                    http://www.springframework.org/schema/beans/spring-beans.xsd
                    http://www.springframework.org/schema/tx 
                    http://www.springframework.org/schema/tx/spring-tx.xsd
                    http://www.springframework.org/schema/aop 
                    http://www.springframework.org/schema/aop/spring-aop.xsd
                    http://www.springframework.org/schema/context      
                    http://www.springframework.org/schema/context/spring-context.xsd">
	<!-- 1.Druid内置提供一个StatFilter，用于统计监控信息 -->
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<property name="mergeSql" value="true" />
		<!-- StatFilter属性slowSqlMillis用来配置SQL慢的标准，执行时间超过slowSqlMillis的就是慢。slowSqlMillis的缺省值为3000，也就是3秒。配置中，slowSqlMillis被修改为10秒，并且通过日志输出执行慢的SQL -->
		<property name="slowSqlMillis" value="10000" />
		<property name="logSlowSql" value="true" />
	</bean>
	<!-- 2.Druid提供了Spring和Jdbc的关联监控。com.alibaba.druid.support.spring.stat.DruidStatInterceptor是一个标准的Spring 
		MethodInterceptor。可以灵活进行AOP配置 -->
	<bean id="druid-stat-interceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
		scope="prototype">
		<property name="patterns">
			<list>
				<value>*.service.*</value>
				<value>*.dao.*</value>
			</list>
		</property>
	</bean>
	<aop:config proxy-target-class="true">
		<aop:advisor advice-ref="druid-stat-interceptor"
			pointcut-ref="druid-stat-pointcut" />
	</aop:config>
	<!-- 3.防御SQL注入攻击 有时候，一些应用框架做了自己的JDBC Proxy Driver，是的DruidDataSource无法正确识别数据库的类型，则需要特别指定 
		详情参阅：https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE-wallfilter -->
	<bean id="wall-filter-config" class="com.alibaba.druid.wall.WallConfig"
		init-method="init">
		<!-- 指定配置装载的目录 -->
		<property name="dir" value="META-INF/druid/wall/mysql" />
	</bean>
	<bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
		<property name="dbType" value="mysql" />
		<property name="config" ref="wall-filter-config" />
	</bean>

	<!-- 数据源开始 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。 如果没有配置，将会生成一个名字，格式是："DataSource-" 
			+ System.identityHashCode(this). 另外配置此属性至少在1.0.5版本中是不起作用的，强行设置name会出错 -->
		<property name="name" value="${dataSource.name}" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${dataSource.url}" />
		<property name="username" value="${dataSource.username}" />
		<property name="password" value="${dataSource.password}" />
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass <property name="driverClassName" 
			value="${dataSource.driverClassName}" /> -->

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${dataSource.initialSize}" />
		<property name="minIdle" value="${dataSource.minIdle}" />
		<property name="maxActive" value="${dataSource.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${dataSource.maxWait}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${dataSource.timeBetweenEvictionRunsMillis}" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${dataSource.minEvictableIdleTimeMillis}" />

		<property name="validationQuery" value="${dataSource.validationQuery}" />
		<property name="testWhileIdle" value="${dataSource.testWhileIdle}" />
		<property name="testOnBorrow" value="${dataSource.testOnBorrow}" />
		<property name="testOnReturn" value="${dataSource.testOnReturn}" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。 -->
		<property name="poolPreparedStatements" value="${dataSource.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="${dataSource.maxPoolPreparedStatementPerConnectionSize}" />

		<!-- 缺省多个DruidDataSource的监控数据是各自独立的，在Druid-0.2.17版本之后，支持配置公用监控数据，配置参数为useGloalDataSourceStat -->
		<property name="useGlobalDataSourceStat" value="true" />
		<property name="filters" value="log4j" />
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
				<ref bean="wall-filter" />
			</list>
		</property>
	</bean>
	<!-- JPA实体管理器工厂 -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="persistenceProvider" ref="persistenceProvider" />
		<property name="jpaVendorAdapter" ref="jpaVendorAdapter" />
		<property name="jpaDialect" ref="jpaDialect" />

		<!-- 加载jpa所有的配置文件 -->
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:/cn/test/*/xml/*.xml</value>
			</list>
		</property>

		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">${jpa.dialect}</prop>
				<prop key="hibernate.connection.driver_class">${jpa.connection.driver_class}</prop>
				<prop key="hibernate.max_fetch_depth">${jpa.max_fetch_depth}</prop>
				<prop key="hibernate.jdbc.fetch_size">${jpa.jdbc.fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${jpa.jdbc.batch_size}</prop>
				<prop key="hibernate.hbm2ddl.auto">${jpa.hbm2ddl.auto}</prop>
				<prop key="hibernate.show_sql">${jpa.show_sql}</prop>
				<prop key="hibernate.format_sql">${jpa.format_sql}</prop>
				<prop key="javax.persistence.validation.mode">${javax.persistence.validation.mode}</prop>
			</props>
		</property>
	</bean>
	<!-- 用于指定持久化实现厂商类 -->
	<bean id="persistenceProvider" class="org.hibernate.ejb.HibernatePersistence" />
	<!-- 用于设置JPA实现厂商的特定属性 -->
	<bean id="jpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="database" value="MYSQL" />
	</bean>
	<!-- 用于指定一些高级特性 -->
	<bean id="jpaDialect" class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />


	<!-- 事务管理器 -->
	<bean id="txManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- 注解式事务 -->
	<tx:annotation-driven transaction-manager="txManager" />
</beans>
